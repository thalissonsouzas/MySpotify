{"ast":null,"code":"/**\n * @license lucide-react v0.399.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst mergeClasses = function () {\n  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n    classes[_key] = arguments[_key];\n  }\n  return classes.filter((className, index, array) => {\n    return Boolean(className) && array.indexOf(className) === index;\n  }).join(\" \");\n};\nexport { mergeClasses, toKebabCase };","map":{"version":3,"mappings":";;;;;;;AAQa,oBAAeA,MAC1B,WAAOC,QAAQ,oBAAsB,SAAO,EAAEC,WAAY;AAsB/C,qBAAe;EAAA,kCAA2CC,OACrE;IADqEA,OACrE;EAAA;EAAA,eACGC,OAAO,CAACC,WAAWC,OAAOC,KAAU;IACnC,OAAOC,QAAQH,SAAS,KAAKE,KAAM,SAAQF,SAAS,CAAM;EAC5D,CAAC,EACAI,KAAK,GAAG;AAAA","names":["string","replace","toLowerCase","classes","filter","className","index","array","Boolean","join"],"sources":["/home/thalisson/trybe/projetos/frontend/sd-030-a-project-trybetunes (cÃ³pia)/node_modules/shared/src/utils.ts"],"sourcesContent":["import { CamelToPascal } from './utility-types';\n\n/**\n * Converts string to kebab case\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Converts string to pascal case\n *\n * @param {string} string\n * @returns {string} A pascalized string\n */\nexport const toPascalCase = <T extends string>(string: T): CamelToPascal<T> => {\n  const camelCase = string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) =>\n    p2 ? p2.toUpperCase() : p1.toLowerCase(),\n  );\n\n  return (camelCase.charAt(0).toUpperCase() + camelCase.slice(1)) as CamelToPascal<T>;\n};\n\n/**\n * Merges classes into a single string\n *\n * @param {array} classes\n * @returns {string} A string of classes\n */\nexport const mergeClasses = <ClassType = string | undefined | null>(...classes: ClassType[]) =>\n  classes\n    .filter((className, index, array) => {\n      return Boolean(className) && array.indexOf(className) === index;\n    })\n    .join(' ');\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\n * @license lucide-react v0.399.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\nimport { mergeClasses } from './shared/src/utils.js';\nconst Icon = forwardRef((_ref, ref) => {\n  let {\n    color = \"currentColor\",\n    size = 24,\n    strokeWidth = 2,\n    absoluteStrokeWidth,\n    className = \"\",\n    children,\n    iconNode,\n    ...rest\n  } = _ref;\n  return createElement(\"svg\", {\n    ref,\n    ...defaultAttributes,\n    width: size,\n    height: size,\n    stroke: color,\n    strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n    className: mergeClasses(\"lucide\", className),\n    ...rest\n  }, [...iconNode.map(_ref2 => {\n    let [tag, attrs] = _ref2;\n    return createElement(tag, attrs);\n  }), ...(Array.isArray(children) ? children : [children])]);\n});\nexport { Icon as default };","map":{"version":3,"mappings":";;;;;;;;;;AAwBA,MAAMA,IAAO,cACX,OAWEC,GACG;EAAA,IAXH;IACEC,KAAQ;IACRC,IAAO;IACPC,WAAc;IACdC;IACAC,SAAY;IACZC;IACAC;IACA,GAAGC;EAAA;EAIE,qBACL,OACA;IACER;IACA,GAAGS;IACHC,KAAO;IACPC,MAAQ;IACRC,MAAQ;IACRT,aAAaC,sBAAuBS,MAAO,YAAW,IAAI,EAAM,UAAOX,IAAI,CAAI;IAC/EG,WAAWS,YAAa,WAAUT,SAAS;IAC3C,GAAGG;EACL,GACA,CACE,GAAGD,QAAS,KAAI;IAAA,IAAC,CAACQ,GAAK,OAAK,CAAM;IAAA,qBAAcA,GAAK,OAAK,CAAC;EAAA,IAC3D,IAAIC,KAAM,SAAQV,QAAQ,CAAI,cAAW,CAACA,QAAQ,GACpD,CACF;AACF,EACF","names":["Icon","ref","color","size","strokeWidth","absoluteStrokeWidth","className","children","iconNode","rest","defaultAttributes","width","height","stroke","Number","mergeClasses","tag","Array"],"sources":["/home/thalisson/Área de Trabalho/portfólio/MySpotify/App/node_modules/lucide-react/src/Icon.ts"],"sourcesContent":["import { createElement, forwardRef } from 'react';\nimport defaultAttributes from './defaultAttributes';\nimport { IconNode, LucideProps } from './types';\nimport { mergeClasses } from '@lucide/shared';\n\ninterface IconComponentProps extends LucideProps {\n  iconNode: IconNode;\n}\n\n/**\n * Lucide icon component\n *\n * @component Icon\n * @param {object} props\n * @param {string} props.color - The color of the icon\n * @param {number} props.size - The size of the icon\n * @param {number} props.strokeWidth - The stroke width of the icon\n * @param {boolean} props.absoluteStrokeWidth - Whether to use absolute stroke width\n * @param {string} props.className - The class name of the icon\n * @param {IconNode} props.children - The children of the icon\n * @param {IconNode} props.iconNode - The icon node of the icon\n *\n * @returns {ForwardRefExoticComponent} LucideIcon\n */\nconst Icon = forwardRef<SVGSVGElement, IconComponentProps>(\n  (\n    {\n      color = 'currentColor',\n      size = 24,\n      strokeWidth = 2,\n      absoluteStrokeWidth,\n      className = '',\n      children,\n      iconNode,\n      ...rest\n    },\n    ref,\n  ) => {\n    return createElement(\n      'svg',\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? (Number(strokeWidth) * 24) / Number(size) : strokeWidth,\n        className: mergeClasses('lucide', className),\n        ...rest,\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...(Array.isArray(children) ? children : [children]),\n      ],\n    );\n  },\n);\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}